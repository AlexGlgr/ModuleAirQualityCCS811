const ClassMiddleSensor=require("ClassSensorArchitecture");class ClassAirQualityCCS811 extends ClassMiddleSensor{constructor(_opts,_sensor_props){ClassMiddleSensor.apply(this,[_opts,_sensor_props]),this._Name="BaseClassCCS811",this._Sensor=require("BaseClassCCS811").connect({i2c:_opts.bus,address:_opts.address}),this._MinPeriod=125,this._UsedChannels=[],this._Interval,this.Init(_sensor_props)}Init(_sensor_props){super.Init(_sensor_props),this._Sensor.init()}Start(_num_channel,_period){let period="number"==typeof _period&_period>=this._MinPeriod?_period:this._MinPeriod,data;this._UsedChannels.includes(_num_channel)||this._UsedChannels.push(_num_channel),this._Interval||(this._Interval=setInterval(()=>{data=this._Sensor.get(),this._UsedChannels.includes(0)&&(this.Ch0_Value=data.eCO2),this._UsedChannels.includes(1)&&(this.Ch1_Value=data.TVOC)}))}ChangeFreq(_num_channel,freq){clearInterval(this._Interval),setTimeout(()=>this.Start(freq),this._Minfrequency)}Stop(_num_channel){_num_channel?this._UsedChannels.splice(this._UsedChannels.indexOf(_num_channel)):(this._UsedChannels=[],clearInterval(this._Interval),this._Interval=null)}}exports=ClassAirQualityCCS811;